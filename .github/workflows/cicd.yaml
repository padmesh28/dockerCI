name: Mews App Build and Deployment Workflow

on:
  workflow_dispatch:
    inputs:
      acr_action:
        description: 'ACR and Docker Build (Apply/Destroy)'
        type: choice
        required: true
        options:
          - apply
          - destroy
        default: apply
      deploy_action:
        description: 'Deployment of application (Apply/Destroy)'
        type: choice
        required: true
        options:
          - apply
          - destroy
        default: apply
      deploy_environment:
        description: 'Select deployment environment (dev/stage/prod)'
        type: choice
        required: true
        options:
          - dev
          - stage
          - prod
        default: dev

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      acr_login_server: ${{ steps.tf_outputs.outputs.acr_login_server }}
      acr_action: ${{ github.event.inputs.acr_action }}

    env:
      ARM_CLIENT_ID:       ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
      ARM_CLIENT_SECRET:   ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
      ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
      ARM_TENANT_ID:       ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}

    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
      - name: Terraform Initialization
        run: terraform init
        working-directory: ./Dockerbuild/acr
      - name: Terraform Apply (ACR)
        if: ${{ github.event.inputs.acr_action == 'apply' }}
        run: terraform apply -auto-approve
        working-directory: ./Dockerbuild/acr
      - name: Get Terraform Outputs ACR credentials
        id: tf_outputs
        if: ${{ github.event.inputs.acr_action == 'apply' }}
        run: |
          echo "acr_login_server=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT
          echo "acr_admin_username=$(terraform output -raw acr_admin_username)" >> $GITHUB_OUTPUT
          echo "acr_admin_password=$(terraform output -raw acr_admin_password)" >> $GITHUB_OUTPUT
        working-directory: ./Dockerbuild/acr
      - name: Docker Login after Provisioning ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.tf_outputs.outputs.acr_login_server }}
          username: ${{ steps.tf_outputs.outputs.acr_admin_username }}
          password: ${{ steps.tf_outputs.outputs.acr_admin_password }}
      - name: Build & Push Docker Image
        run: |
          docker build -t ${{ steps.tf_outputs.outputs.acr_login_server }}/sampleapp:${{ github.sha }} \
                       ./Dockerbuild
          docker push ${{ steps.tf_outputs.outputs.acr_login_server }}/sampleapp:${{ github.sha }}

  Deployment:
    runs-on: ubuntu-latest
    needs: build
    env:
      ARM_CLIENT_ID:       ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
      ARM_CLIENT_SECRET:   ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
      ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
      ARM_TENANT_ID:       ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
      - name: Terraform Initialization
        run: terraform init
        working-directory: ./environments/${{ github.event.inputs.deploy_environment }}
      - name: Terraform Plan
        run: |
          terraform plan \
            -var="image_tag=${{ github.sha }}" \
            -var="acr_login_server=${{ needs.build.outputs.acr_login_server }}" \
            -var="image_repository=sampleapp" \
            -out=tfplan
        working-directory: ./environments/${{ github.event.inputs.deploy_environment }}
      - name: Terraform Apply
        if: ${{ github.event.inputs.deploy_action == 'apply' }}
        run: terraform apply -auto-approve tfplan
        working-directory: ./environments/${{ github.event.inputs.deploy_environment }}
      - name: Verify Deployment
        if: ${{ github.event.inputs.deploy_action == 'apply' }}
        run: |
          sleep 30
          APP_URL=$(terraform output -raw app_url)
          status_code=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL")
          if [ "$status_code" -eq 200 ]; then
            echo "✅ Deployment successful!  $APP_URL "
          else
            echo "❌ Deployment verification failed (Status: $status_code)"
            exit 1
          fi
        working-directory: ./environments/${{ github.event.inputs.deploy_environment }}
      - name: Terraform Destroy
        if: ${{ github.event.inputs.deploy_action == 'destroy' }}
        run: |
          terraform destroy -auto-approve \
          -var="image_tag=${{ github.sha }}" \
          -var="acr_login_server=${{ needs.build.outputs.acr_login_server }}" \
          -var="image_repository=sampleapp"
        working-directory: ./environments/${{ github.event.inputs.deploy_environment }}