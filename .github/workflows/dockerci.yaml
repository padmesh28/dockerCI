name: Linux_Container_Workflow

on:
  workflow_dispatch:
    inputs:
      acr_action:
        description: 'Create ACR and Build/Push Docker Image (Apply or Destroy)'
        type: choice
        required: true
        options:
          - apply
          - destroy
        default: apply
      deploy_action:
        description: 'Action for Deployment (Apply or Destroy)'
        type: choice
        required: true
        options:
          - apply
          - destroy
        default: apply

jobs:
  storage-account:
    runs-on: ubuntu-latest

    env:
      RESOURCE_GROUP_NAME: mews-rg

    steps:
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create Resource Group
        run: |
          az group create --name $RESOURCE_GROUP_NAME --location westeurope

      - name: Create First Storage Account and Container
        run: |
          az storage account create \
            --resource-group $RESOURCE_GROUP_NAME \
            --name mewsstorage \
            --sku Standard_LRS \
            --encryption-services blob

          az storage container create \
            --name tfstate \
            --account-name mewsstorage

      - name: Create Second Storage Account and Container
        run: |
          az storage account create \
            --resource-group $RESOURCE_GROUP_NAME \
            --name mewsstorageapps \
            --sku Standard_LRS \
            --encryption-services blob

          az storage container create \
            --name tfstate \
            --account-name mewsstorageapps

  build:
    runs-on: ubuntu-latest

    outputs:
      acr_login_server: ${{ steps.tf_outputs.outputs.acr_login_server }}
      acr_action: ${{ github.event.inputs.acr_action }}

    env:
      ARM_CLIENT_ID:       ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
      ARM_CLIENT_SECRET:   ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
      ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
      ARM_TENANT_ID:       ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./build-artifacts/acr

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ./build-artifacts/acr

      - name: Terraform ${{ github.event.inputs.acr_action }}
        run: terraform ${{ github.event.inputs.acr_action }} -auto-approve tfplan
        working-directory: ./build-artifacts/acr

      - name: Get Terraform Outputs
        id: tf_outputs
        if: ${{ github.event.inputs.acr_action == 'apply' }}
        run: |
          echo "acr_login_server=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT
          echo "acr_admin_username=$(terraform output -raw acr_admin_username)" >> $GITHUB_OUTPUT
          echo "acr_admin_password=$(terraform output -raw acr_admin_password)" >> $GITHUB_OUTPUT
        working-directory: ./build-artifacts/acr

      - name: Docker Login to ACR
        if: ${{ github.event.inputs.acr_action == 'apply' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ steps.tf_outputs.outputs.acr_login_server }}
          username: ${{ steps.tf_outputs.outputs.acr_admin_username }}
          password: ${{ steps.tf_outputs.outputs.acr_admin_password }}

      - name: Docker Login to Docker Hub
        if: ${{ github.event.inputs.acr_action == 'apply' }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image
        if: ${{ github.event.inputs.acr_action == 'apply' }}
        run: |
          docker build -t ${{ steps.tf_outputs.outputs.acr_login_server }}/sampleapp:${{ github.sha }} \
                       -t padmesh28/mews:${{ github.sha }} ./build-artifacts

      - name: Push Docker Image to ACR
        if: ${{ github.event.inputs.acr_action == 'apply' }}
        run: |
          docker push ${{ steps.tf_outputs.outputs.acr_login_server }}/sampleapp:${{ github.sha }}

      - name: Push Docker Image to Docker Hub
        if: ${{ github.event.inputs.acr_action == 'apply' }}
        run: |
          docker push padmesh28/mews:${{ github.sha }}

  deploy-dev:
    runs-on: ubuntu-latest
    needs: build
    if: ${{ needs.build.outputs.acr_action == 'apply' }}

    env:
      ARM_CLIENT_ID:       ${{ fromJson(secrets.AZURE_CREDENTIALS).clientId }}
      ARM_CLIENT_SECRET:   ${{ fromJson(secrets.AZURE_CREDENTIALS).clientSecret }}
      ARM_SUBSCRIPTION_ID: ${{ fromJson(secrets.AZURE_CREDENTIALS).subscriptionId }}
      ARM_TENANT_ID:       ${{ fromJson(secrets.AZURE_CREDENTIALS).tenantId }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init (dev)
        run: terraform init
        working-directory: ./environments/dev

      - name: Terraform Plan (dev)
        run: |
          terraform plan \
            -var="image_tag=${{ github.sha }}" \
            -var="acr_login_server=${{ needs.build.outputs.acr_login_server }}" \
            -out=tfplan
        working-directory: ./environments/dev

      - name: Terraform Apply (dev)
        if: ${{ github.event.inputs.deploy_action == 'apply' }}
        run: terraform apply -auto-approve tfplan
        working-directory: ./environments/dev

      - name: Terraform Destroy (dev)
        if: ${{ github.event.inputs.deploy_action == 'destroy' }}
        run: terraform destroy -auto-approve \
            -var="image_tag=${{ github.sha }}" \
            -var="acr_login_server=${{ needs.build.outputs.acr_login_server }}"
        working-directory: ./environments/dev